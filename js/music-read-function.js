//--以下是map的关卡数据




var curloc={
    x:1,
    y:1
} 
var level=0//当前关卡


// bw==book weak(卷轴提示音) bs==book strong(卷轴所在地) final==终点线
let wall={ //n号墙:[墙格挡的时候的发音,墙被开启时候的发音]
    '1':['normalbump',''],
    '2': ['doorbump','dooropen'],
    '3':['waterwave','']
}
//第一个值代表map上的物品状态码
// 第二个值代表方块右边的竖线
// 第三个值代表方块下边的横线
// 之所以使用线条是怕格挡的部分太占地图大小，目前是24*12的地图
// 线条的值：0--无格挡；1--普通格挡，2--可开启的门
// 最后一个对象存当前关卡所有可互动的信息
let map0=[
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],         /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],['bw',0,0],['bw',0,0],['bw',0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],         /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],['bw',0,0],['bs',0,0],['bw',0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],         /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
         
    [[0,0,0],[0,0,0],[0,0,0],['bw',0,0],['bw',0,0],['bw',0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],         /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],['listening',2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],['listening',2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
             
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],['listening',2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
                   
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],          /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],['final',0,0]]
    ,{
        'bw':[],
        'bs':{
           '4-2':[[0,49],[0,50],[0,51],[0,52]]
        },
        'listening':{ //监听的位置：[开机关乐谱，hintMusic]
            '11-4':[[[0,49],[0,50],[0,51],[0,52]],'dooropen'],
            '11-5':[[[0,49],[0,50],[0,51],[0,52]],'dooropen'],
            '11-6':[[[0,49],[0,50],[0,51],[0,52]],'dooropen']
        }
    }
]

let map1=[
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],                 [0,0,0],['bw',0,1],['bw',0,1],/**/ ['bw',0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],       ['listening',2,0],['bw',0,1],['bs',1,1],/**/ ['bw',0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,1,0],[0,1,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],                 [0,0,0],['bw',0,0],['bw',0,0],/**/ ['bw',0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],

    [[0,1,3],[0,1,0],[0,0,3],[0,0,3],[0,0,3],[0,0,3], /**/ [0,0,3],[0,0,3],[0,0,3],[0,0,3],[0,0,3],[0,0,3],/**/ [0,0,3],[0,0,3],[0,0,3],                 [0,0,3],[0,0,3],[0,0,3],      /**/ [0,0,3],[0,0,3],[0,0,3],[0,0,3],[0,0,3],[0,0,3]],
    [[0,1,0],['listening',1,3],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],                 [0,0,0],[0,0,0],[0,0,0],      /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],                 [0,0,0],[0,0,0],[0,0,0],      /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
                    
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],                 [0,0,0],[0,0,0],[0,0,0],      /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],                 [0,0,0],[0,0,0],[0,0,0],      /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],                 [0,0,0],[0,0,0],[0,0,0],      /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
                
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],                 [0,0,0],[0,0,0],[0,0,0],      /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],                 [0,0,0],[0,0,0],[0,0,0],      /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],                 [0,0,0],[0,0,0],[0,0,0],      /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],['final',0,0]]
    ,{
        'bw':[],
        'bs':{
           '17-1':[[1,54],[1,81],[1,87],[1,69],[1,84],[1,69],[1,81],[1,87],[1,54]] //password; keycode=[49,50,51,52,53,54,55,81,87,69,82,84,89,85,73]
        },
        'listening':{ //监听的位置：[开启机关乐谱，开启hintMusic]
            '15-1':[[[0,49],[0,50],[0,51],[0,52]],'dooropen'],
            '1-4':[[[1,54],[1,81],[1,87],[1,69],[1,84],[1,69],[1,81],[1,87],[1,54]],'boatmove']
        }
    }
]
let map2=[
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],

    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],

    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]
]
let map3=[
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],

    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],

    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]
]
let map4=[
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],

    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],

    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]
]
let map5=[
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],

    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,2,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],

    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
    [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0], /**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,1,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],/**/ [0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]
]

let curmap=eval('map'+level) //map=当前关卡的map


//注册小人
var player=document.getElementById('player')
// 注册大地图
let mapcontainer=document.getElementById('mapcontainer')



//注册音乐audio

let piano=[]
let violin=[]

for(let i=1;i<=7;i++){
const audio=document.createElement("audio");
audio.src="./src/music/singal-music-notes/piano/low"+i+".wav";//路径
piano.push(audio)
const audio2=document.createElement("audio");
audio2.src="./src/music/singal-music-notes/violin/low"+i+".wav";//路径
violin.push(audio2)
}

for(let i=1;i<=7;i++){
const audio=document.createElement("audio");
audio.src="./src/music/singal-music-notes/piano/mid"+i+".wav";//路径
piano.push(audio)
const audio2=document.createElement("audio");
audio2.src="./src/music/singal-music-notes/violin/mid"+i+".wav";//路径
violin.push(audio2)
}

const audio=document.createElement("audio");
audio.src="./src/music/singal-music-notes/piano/tall1.wav";//路径
piano.push(audio)
const audio2=document.createElement("audio");
audio2.src="./src/music/singal-music-notes/violin/tall1.wav";//路径
violin.push(audio2)

// console.log(piano,violin)
// 小提琴音源太吵了给降点儿音量
for(let i=0;i<violin.length;i++){
    violin[i].volume=0.03
}

//得出的arr一共15个音符，0-14对应low1-tall1


let playmode=false;
let instrucode=0  //乐器code 0--piano; 1--violin
let playmodeKeycodeTable=[49,50,51,52,53,54,55,81,87,69,82,84,89,85,73] //对应音符与键盘的keycode
let currentPlay=[] //从打开z到关上z的演奏记录

let hintSource=[ //存一下src资源
    ['normalbump','./src/music/hintMusic/normalbump.wav'],
    ['doorbump','./src/music/hintMusic/doorbump.wav'],
    ['paper','./src/music/hintMusic/paper.wav'],
    ['dooropen','./src/music/hintMusic/dooropen.mp3'],
    ['victory','./src/music/hintMusic/victory.wav'],
    ['waterwave','./src/music/hintMusic/waterwave.wav'],
    ['boatmove','./src/music/hintMusic/boatmove.wav']
] 
let hintAudioDic=new Object() //给提示音注册audio然后存到这个dic里，被hintplay调用
for(let i=0;i<hintSource.length;i++){
    const audiotemp=document.createElement("audio");
    audiotemp.src=hintSource[i][1];//路径
    hintAudioDic[hintSource[i][0]]=audiotemp
}


// keydown时候的小人逻辑

document.addEventListener("keydown",keydown);


function keydown(event){
    // console.log(event.keyCode);

//根据键盘码决定要干的事
    switch(event.keyCode){
        case 32: //空格
            //查看地图是否有可交互物体
            if( curmap[curloc.y][curloc.x][0]!=0){
                // 具体交互事件
                console.log(curloc)
                interactEvent(curmap[curloc.y][curloc.x][0],curloc.x,curloc.y)
            }
            break;
        case 90: //z键切换playmode--需要解构
            if(!playmode){
                currentPlay=[] //开启play事件
            }else{
                // console.log(currentPlay) //结束play事件
                stopPlaymode(0,curloc)
            }
            playmode=!playmode;
            break;
        case 88: //x键切换instrument
            instrucode=instrucode ^ 1;
            break;
        default: //playmode和walkmode不兼容(不然会有逻辑问题)
            if(playmode){
                let newNote=musicplay(instrucode,event.keyCode)
                if(newNote!=-1) currentPlay.push(newNote)
                if(currentPlay.length>64) currentPlay.unshift() //超出部分覆盖掉之前的
            }else{
                move(event.keyCode)
            }
    }
}

function stopPlaymode(level,curloc){
    let isCorrect=false
                if(curmap[curloc.y][curloc.x][0]=='listening'){//如果是listening则触发stopPlaymode与paassword的匹配，结果存于isCorrect中
                    let password=curmap[curmap.length-1]['listening'][`${curloc.x}-${curloc.y}`][0]//存于尾部对象中的对于当前位置的password
                    // console.log(curloc.x,curloc.y,password)
                    if(currentPlay.length==password.length){
                        isCorrect=true
                        for(let i=0;i<currentPlay.length;i++){
                            if(currentPlay[i][0]!=password[i][0] || currentPlay[i][1]!=password[i][1] ){
                                isCorrect=false
                                break
                            }
                        }
                    }
                }

                if(isCorrect) { //如果curPlay满足门开启的条件
                    let passmusic=curmap[curmap.length-1]['listening'][`${curloc.x}-${curloc.y}`][1]
                    curmap[curloc.y][curloc.x][1]=curmap[curloc.y][curloc.x][1]!=1 ? 0 : curmap[curloc.y][curloc.x][1]
                    curmap[curloc.y][curloc.x][2]=curmap[curloc.y][curloc.x][2]!=1 ? 0 : curmap[curloc.y][curloc.x][2]
                    if(curloc.x-1>=0) curmap[curloc.y][curloc.x-1][1]=curmap[curloc.y][curloc.x-1][1]!=1 ? 0 : curmap[curloc.y][curloc.x-1][1]
                    if(curloc.y-1>=0) curmap[curloc.y-1][curloc.x][2]=curmap[curloc.y-1][curloc.x][2]!=1 ? 0 : curmap[curloc.y-1][curloc.x][2]
                    hintplay(passmusic,1)
                }
}

//音符播放 和 提示音播放
function musicplay(instrucode=0,keycode){
    let ind=playmodeKeycodeTable.indexOf(keycode)
    if(ind==-1) return -1
    let arr=instrucode==0?piano:violin
    arr[ind].pause();
    arr[ind].currentTime = 0;
    arr[ind].play()
    return [instrucode,keycode]  //返回一个乐器+音符的标识值
}
function hintplay(type,volume){
    let ad= hintAudioDic[type]
    if(volume){
        ad.volume=volume
    }
    ad.play()
    
}

//人物行走
function move(keycode,mapinfo){

    switch(keycode){
        case 37: //←
            moveTo('left',curloc.x,curloc.y,curloc.x-1,curloc.y)
            break;
        case 39: //→
            moveTo('right',curloc.x,curloc.y,curloc.x+1,curloc.y)
            break;
        case 38: //↑
            moveTo('up',curloc.x,curloc.y,curloc.x,curloc.y-1)
            break;    
        
        case 40: //↓
            moveTo('down',curloc.x,curloc.y,curloc.x,curloc.y+1)
            break;
    }
}

//当：从上一个loc move 到一个新的loc时会发生的事：
// 1.无法到达，播放碰撞音，curloc不变
// 2.无法到达，但是有开门机关，播放别样碰撞音，监听currentPlay,如果成功匹配则播放开门音，curmap修改当前格挡为0
// 2.到达终点，进入下一关
//3.到达可交互物体附近：播放低音hint
//4.到达可交互物体上，按下空格键触发交互（卷轴的播放等）
function moveTo(oren,curX,curY,newX,newY){  //之所以不直接写orentation 是因为可能会有传送
    
    
    if(oren){
        let result=checkBump(oren,curX,curY,newX,newY)
        if(!result) return false
    }
   
    curloc.x=newX
    curloc.y=newY
    player.style.top=curloc.y*50+'px'
    player.style.left=curloc.x*50+'px'
    if(curmap[newY][newX][0]!=0){
        checkEvent(curmap[newY][newX][0])

    }   

    return true
}

function checkBump(oren,curX,curY,newX,newY){
    // normalbump--撞到砖墙的声音
    if(newY<0 || newX<0 || newX>=24 || newY>=12 ){
        hintplay('normalbump')
        return false
    }
    let res=true
    switch(oren){
        case 'left':
            if(curmap[newY][newX][1]!=0){
                hintplay(wall[curmap[newY][newX][1]][0])
                res=false
            }
            break;
        case 'right':
            if(curmap[curY][curX][1]!=0){
                hintplay(wall[curmap[curY][curX][1]][0])
                res=false
            }
            break;
        case 'up':
            if(curmap[newY][newX][2]!=0){
                hintplay(wall[curmap[newY][newX][2]][0])
                res=false
            }
            break;
        case 'down':
            if(curmap[curY][curX][2]!=0){
                hintplay(wall[curmap[curY][curX][2]][0])
                res=false
            }
            break;
    }

   return res
}
function checkEvent(mapEventCode){ //判断地图上是否有需要提示的元素并播放提示音

        if(mapEventCode=='bw'){
            hintplay('paper',0.03)
        }
        if(mapEventCode=='bs'){
            hintplay('paper',0.5)
        }
        if(mapEventCode=='final'){  //通关
            interactEvent('final',curloc.x,curloc.y)
            hintplay('victory',0.7)
            
        }
}

function interactEvent(mapEventCode,x,y){

    if( mapEventCode=='bs'){ //卷轴事件交互
        let line=curmap[curmap.length-1]['bs'][`${x}-${y}`]
        for(let i=0;i<line.length;i++){
            (function (i) {
            setTimeout(musicplay,1000*i,line[i][0],line[i][1])
            })(i)
        }
    }
     
    if( mapEventCode=='final'){ //执行通关逻辑
       
       
        // 下一关逻辑
        level+=1
        curmap=eval('map'+level)

        console.log(curmap==map1,level)
        storyboardShow(story[level.toString()])
        //
        for(let k of Object.keys(hintAudioDic)){
            hintAudioDic[k].pause()
            hintAudioDic[k].currentTime = 0;
            
        }

         // 小人复位逻辑
        setTimeout(resetLoc,500) //处理完所有逻辑后再resetLoc
        
    }

}

function resetLoc(){
    curloc.x=1
    curloc.y=1
    player.style.top=curloc.y*50+'px'
    player.style.left=curloc.x*50+'px'
}


// storyboard显示事件
function storyboardShow(storyObj){
    // console.log(storyboard.children[0].src)
    storyboard.children[0].src=storyObj.imgurl
    storyboard.children[1].innerHTML=storyObj.title
    storyboard.children[2].innerHTML=storyObj.text
    mapcontainer.style.backgroundImage=`url('${storyObj.mapimgurl}')`
    storyboard.style.visibility='visible'

}
function storyboardFade(){
    console.log('fade')
    storyboard.style.visibility = 'hidden'
}
var storyboard=document.getElementById('storyboard')
storyboard.onclick=storyboardFade
var story={
    '0':{
        title:'耳听为实，眼见为虚',
        imgurl:'',//这个路径是相对于html的路径
        text:'小明迷路了',
        mapimgurl:''//这个路径是相对于html的路径
    },
    '1':{
        title:'让我们荡起双桨',
        imgurl:'', //这个路径是相对于html的路径
        text:'人不能两次踏入同一条河',
        mapimgurl:'./src/pics/mapBackground/1.jpg'//这个路径是相对于html的路径
    },
    '2':{
        title:'',
        imgurl:'',
        text:'',
        mapimgurl:''
    },
    '3':{
        title:'',
        imgurl:'',
        text:'',
        mapimgurl:''
    },
    '4':{
        title:'',
        imgurl:'',
        text:'',
        mapimgurl:''
    },
    '5':{
        title:'',
        imgurl:'',
        text:'',
        mapimgurl:''
    }
    
}






